#!/bin/bash

arguments=$@
set -- $arguments

#required
required="" #add required keys in this string
for r in $required;do
  if [[ "$arguments" != *$r* ]];then
    echo "$r is required"
    echo "use arparse -h to see help"
    exit 0
  fi
done

help_statement="USAGE: ./arparse [--key=value] [--name=value] [-V] [-k value] [-h] [-z] other arguments ..."

#can't be used together
not_together="--local --remote: " #add : separated can't be used together options
IFS_OLD=$IFS
IFS=$:
no_of_arguments=0
for t in $not_together;do
  IFS=$IFS_OLD
  for each in $t;do
    if [[ "$arguments" == *$each* ]];then
      no_of_arguments=$[ $no_of_arguments+1 ]
      if [ $no_of_arguments -ge 2 ];then
        echo "$t can't be used together"
        echo "use arparse -h to see help"
        exit 0;
      fi
    fi
  done
done
IFS=$IFS_OLD

#declarence of array to hold key value pair
declare -A json_object

#taking the --key=value pairs
arguments_copy=$arguments
for each in $arguments;do
  if [[ $each == --* ]];then
    arguments_copy=${arguments_copy/$each/""}
    IFS=$=
    x=($each)
    json_object[${x[0]:2}]=${x[1]}
    IFS=$IFS_OLD
  fi
done
IFS=$IFS_OLD
arguments=$arguments_copy
set -- $arguments

#options
options=":Vhk:z" #add options as required by adding option letter and defining its function below
while getopts $options opt;do
  case $opt in
    V) json_object[Verbose]="true";;
    h) echo $help_statement;;
    k) json_object[key]=$OPTARG;;
    z) json_object[zombie]="true";;
    --) shift;break;;
    *) echo "used in Unknown way"
       echo "please use arparse -h to see help"
       exit 1;;
  esac
  shift
done


#comands and subcommands
for (( i=1 ; i<=$# ; ++i ));do
  case $i in
    1) json_object[command]=$1;;
    2) json_object[subcommand]=$2;;
    *) echo "unknown no. of commands put"
       echo "please use arparse -h to see help"
       exit 1;;
  esac
done

#final step -validation
for i in "${!json_object[@]}"
do
  case $i in
    key) re='^[0-9]+$'
         if ! [[ ${json_object[$i]} =~ $re ]] || ! [ ${json_object[$i]} -gt 0 ];then
           echo "The value for the '--key' argument must be a positive integer"
           exit 1
         fi;;
    local) json_object[$i]="true";;
    remote) json_object[$i]="true";;
  esac
done

#echoing all the results
echo -n "{ "
for i in "${!json_object[@]}"
do
  echo -n "$i : ${json_object[$i]}, "
done
echo "}"
