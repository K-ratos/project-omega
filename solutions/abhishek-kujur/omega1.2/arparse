#!/bin/bash

# add required keys in this string
required="--key --name"

# add : separated keys that
# can't be used together below
not_together="--local --remote: "

# add options as required by adding option letter and define
# its function below
# if you want the value from user use : after that
# -> ex- :Vh ->k:<- z
options=":Vhk:z"


arguments=$@
set -- $arguments
if [[ $arguments == *-h* ]]; then
  required=""
fi


# required
for r in $required; do
  if [[ "$arguments" != *$r* ]]; then
    (>&2 echo "$r is required")
    (>&2 echo "use arparse -h to see help")
    exit 1
  fi
done

help_statement="USAGE: ./arparse [--key=value] [--name=value] [-V] [-k value]
 [-h] [-z] other arguments ..."

# can't be used together
IFS_OLD=$IFS
IFS=$:
no_of_arguments=0
for t in $not_together; do
  IFS=$IFS_OLD
  for each in $t; do
    if [[ "$arguments" == *$each* ]]; then
      no_of_arguments=$[ $no_of_arguments+1 ]
      if [ $no_of_arguments -ge 2 ]; then
        (>&2 echo "$t can't be used together")
        (>&2 echo "use arparse -h to see help")
        exit 1
      fi
    fi
  done
done
IFS=$IFS_OLD

# declarence of array to hold key value pair
declare -A json_object

# taking the --key=value pairs
arguments_copy=$arguments
for each in $arguments; do
  if [[ $each == --* ]]; then
    arguments_copy=${arguments_copy/$each/""}
    IFS=$=
    x=($each)
    json_object[${x[0]:2}]=${x[1]}
    IFS=$IFS_OLD
  fi
done
IFS=$IFS_OLD
arguments=$arguments_copy
set -- $arguments

# options -> define your shortnames here
while getopts $options opt; do
  case $opt in
    V) json_object[Verbose]="true";;
    h) echo $help_statement;;
    k) json_object[key]=$OPTARG;;
    z) json_object[zombie]="true";;
    --) shift;break;;
    *) (>&2 echo "used in Unknown way")
       (>&2 echo "please use arparse -h to see help")
       exit 1;;
  esac
  shift
done


# commands and subcommands
for (( i=1 ; i<=$# ; ++i )); do
  case $i in
    1) json_object[command]=$1;;
    2) json_object[subcommand]=$2;;
    *) (>&2 echo "unknown no. of commands put")
       (>&2 echo "please use arparse -h to see help")
       exit 1;;
  esac
done

# final step -validation
for i in "${!json_object[@]}"; do
  case $i in
    key)
        re='^[0-9]+$'
        if ! [[ ${json_object[$i]} =~ $re ]] ||
           ! [ ${json_object[$i]} -gt 0 ]; then
          (>&2 echo "The value for the '--key' argument must be a positive integer")
          exit 1
        fi
        ;;
    local) json_object[$i]="true";;
    remote) json_object[$i]="true";;
  esac
done

# echoing all the results
echo -n "{ "
for i in "${!json_object[@]}"; do
  echo -n "$i : ${json_object[$i]}, "
done
echo "}"
